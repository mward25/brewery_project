Access-Control-Allow-Origin: *
<html>
<head><title>Brewery webpage</title></head>
<body onload="GenerateTables()">
<h1>Brewery LOGO</h1>

<table width=100%>
<tr><td bgcolor=#fafa2f><a href="page_not_found.html">Home</a> <b>></b><a href="page_not_found.html">Brews</a> <b>></b> <a href="page_not_found.html">Administration</a>
</td></tr>
</table>

<p>
<a href="page_not_found.html">Home</a> <b>></b><a href="page_not_found.html"> Brews </a> <b>></b> <b>Scheduled Brews</b>
<p>

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>

<table class="tg" id="batchesTable">
<thead>
<tr>
	<th bgcolor=#CBC3E3>Name</th>
	<th bgcolor=#CBC3E3>Style</th>
	<th bgcolor=#CBC3E3>IBU</th>
	<th bgcolor=#CBC3E3>ABV</th>
	<th bgcolor=#CBC3E3>Recipe</th>
	<th bgcolor=#CBC3E3>Inventory</th>
	<th bgcolor=#CBC3E3>Brew now!</th>
	<th bgcolor=#CBC3E3>Schedule a brew</th>
</tr>
</thead>

<tbody>
<tr>
	<!--
	<td>good beer</td>
	<td>good :-)</td>
	<td>50</td>
	<td>5</td>
	<td><a href="page_not_found.html">good recipe</a></td>
	<td><a href="page_not_found.html">Inventory</a></td>
	<td><input type=checkbox>Brew now</input></td>
	<td><input type=date>Schedule a brew:</input></td>
	!-->
</tr>
</table>

<p> <b> Add a Recipe </b> </p>

<table cellspacing="0" cellpadding="0" width=80%> 
	<tr>
		<th width=9%> <button> Save changes </button>  </p> </th>
		<th width=1%> <a> </a> </th>
		<th><a>Search by style or name   </a> <input type=search> </th>
	</tr>
</table>

<p style="text-align:center;"> </input> </p>

<!-- Name | Version | Style | IBU | ABV | Ingredients | Last Brewed | Inventory | Schedule a Brew --!>
	<!--div id="nonScheduledBrewsTable">--!>
<table class="tg" id="nonScheduledBrewsTable">
<thead>
<tr>
	<th bgcolor=#CBC3E3>Version</th>
	<th bgcolor=#CBC3E3>Name</th>
	<th bgcolor=#CBC3E3>Style</th>
	<th bgcolor=#CBC3E3>IBU</th>
	<th bgcolor=#CBC3E3>ABV</th>
	<th bgcolor=#CBC3E3>Ingredients</th>
	<th bgcolor=#CBC3E3>Last Brewed</th>
	<th bgcolor=#CBC3E3>Inventory</th>
	<th bgcolor=#CBC3E3>Add to Scheduled Brews</th>
</tr>
</thead>
<tbody>
<!--<tr>
	td><label for="Version">Ver</label>
		<select name="Version" id="Version">
			<option value=0>0</option>
			<option value=1>1</option>
			<option value=2>2</option>
	<td>good beer</td>
	<td>good :-)</td>
	<td>50</td>
	<td>5</td>
	<td><a href="page_not_found.html">Ingredients</a></td>
	<td>10-20-2021</td>
	<td><a href="page_not_found.html">Inventory</a></td>
	<td><button>Add to brew</button></td>
</tr>
--!>
<!--</div id="nonScheduledBrewsTable">--!>

</table>

<hr />
<div id="dvTable"></div>
	<script type="text/javascript">
			const SERVER_URL = "https://localhost:44344/api/";
			const RECIPIES = "recipes/";
			const BATCHES = "batches/";
			const STYLE = "styles/"
			const GET_INSTRUCT = "GET";
			const HEADER_VALUE = "*";
			const HEADER = "Access-Control-Allow-Origin" + ": " + HEADER_VALUE;

			const PAGE_NOT_FOUND_REFERENCE_START = "<a href=page_not_found.html>";
			const PAGE_NOT_FOUND_END = "</a>";

			var outputBatches = [];

			function GenerateTables()
			{
				GenerateRecipeTable();
				//GenerateBatchesTable();
			}

			// I got this function from Andy E on https://stackoverflow.com/questions/3075577/convert-mysql-datetime-stamp-into-javascripts-date-format
			Date.createFromMysql = function(mysql_string) 
			{ 
				var t, result = null;

				if( typeof mysql_string === 'string' )
				{
					t = mysql_string.split(/[- :]/);
					//when t[3], t[4] and t[5] are missing they defaults to zero
					result = new Date(t[0], t[1] - 1, t[2], t[3] || 0, t[4] || 0, t[5] || 0);          
				}

				return result;   
			}

			function GetLatestDate(inputRecipe)
			{
				console.log("batches=" + inputRecipe.batches.length);
				var returnValue;
				theDataData = inputRecipe.batches;
				if ( !(theDataData.length <= 0) ) 
				{
					importantData = [];
					for (let i = 0; i < theDataData.length; i++)
					{
						importantData.push(Date.createFromMysql(theDataData.finishDate));
					}

					if (importantData !== undefined)
					{
						//if (importantData[0] !== undefined)
						//{
						//	var shortestData = importantData[0];
						//}
						var shortestData = null;
						for (let i = 1; i < importantData.length; i++)
						{
							console.log("importantData[i]=" + importantData[i].toString());
							if (shortestData == null)
							{
								shortestData = importantData[i];
							}
							if (importantData[i] !== undefined && importantData[i] > shortestData)
							{
								shortestData = importantData[i];
							}
						}
						returnValue = shortestData;
					}
				}
				else
				{
					returnValue = "no date found";
				}
				console.log("returnValue=" + returnValue);
				return returnValue;
			}

			function GetRemoteVar(serverUrl, query)
			{

				var theData= new XMLHttpRequest();
				var returnValue;
				theData.open(GET_INSTRUCT, serverUrl + RECIPIES);
				theData.setRequestHeader('Content-type', 'application/json');

				theData.onload = (e) => {
					returnValue = JSON.parse(theData.response);
					return returnValue;
				}
			}

			function GenerateRecipeTable() 
			{
				var theTable = document.getElementById("nonScheduledBrewsTable");
				var theData = new XMLHttpRequest();
				//theData.Header = HEADER;
				theData.open(GET_INSTRUCT, SERVER_URL + RECIPIES);
				//theData.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); 
				theData.setRequestHeader('Access-Control-Allow-Origin', 'SERVER_URL');
				//Access-Control-Allow-Origin
				//theData.setRequestHeader("Sec-Fetch-Mode", "no-cors");
				theData.setRequestHeader('Content-type', 'application/json');
				theData.send();
				theData.onload = (e) => {
					//console.log(theDataResponce.response);
					var theDataResponce = JSON.parse(theData.response);

					console.log("code reached before for loop");
					console.log("theDataResponce.length=" + theDataResponce.length);
					for (let i = 0; i < theDataResponce.length; i++)
					{
						console.log("code reached inside for loop");
						console.log("ran for loop " + i + " times");
						var theRow = theTable.insertRow(1);

						var versionCell             = theRow.insertCell(-1);
						var nameCell                = theRow.insertCell(-1);
						var styleCell               = theRow.insertCell(-1);
						var ibuCell                 = theRow.insertCell(-1);
						var abvCell                 = theRow.insertCell(-1);
						var ingredientsCell         = theRow.insertCell(-1);
						var lastBrewedCell          = theRow.insertCell(-1);
						var inventoryCell           = theRow.insertCell(-1);
						var addToScheduledBrewsCell = theRow.insertCell(-1);

						recipeStyle = GetRemoteVar(SERVER_URL, STYLE + theDataResponce[i].styleId);
						//console.log("recipeStyle=" + recipeStyle.name);
						versionCell           .innerHTML = theDataResponce[i].version; 
						nameCell              .innerHTML = theDataResponce[i].name + "</a>";
						styleCell             .innerHTML = recipeStyle.name; 
						ibuCell               .innerHTML = recipeStyle.ibuMin;
						abvCell               .innerHTML = recipeStyle.abvMin;
						
						ingredientsCell        .innerHTML = PAGE_NOT_FOUND_REFERENCE_START + "ingredients" + PAGE_NOT_FOUND_END;
						var latestDate = theDataResponce[i].date;
						if (typeof latestDate === 'string')
						{
						}
						else if (typeof latestDate === 'Date')
						{
							latestDate = latestDate.toString();
						}
						else if (latestDate == null)
						{
							latestDate = "never brewed";
						}
						console.log("latestDate=" + latestDate);
						lastBrewedCell         .innerHTML = latestDate;
						inventoryCell          .innerHTML = PAGE_NOT_FOUND_REFERENCE_START + "inventory" + PAGE_NOT_FOUND_END;
						addToScheduledBrewsCell.innerHTML = "<button> add to brew </button>";
					}
					console.log("code reached after for loop");
				}
				
				function AddBatch(outputBatchesInput = outputBatches, theBatch)
				{

					if (theBatch == undefined || theBatch == null)
					{
						return;
					}
					else
					{
						var recipeGetter = new XMLHttpRequest();
						recipeGetter.open(GET_INSTRUCT, SERVER_URL + RECIPIES + theBatch.recipeId);
						recipeGetter.setRequestHeader('Content-type', 'application/json');
						recipeGetter.send();

						var theRecipe;

						recipeGetter.onload = (e) => {
							theRecipe = JSON.parse(recipeGetter.response);
						}
						
						

						outputBatchesInput.push(theBatch);
						
						var theTable = document.getElementById("nonScheduledBrewsTable");
						var theRow = theTable.insertRow(1);

						var Version             = theRow.insertCell(-1);
						var Name                = theRow.insertCell(-1);
						var Style               = theRow.insertCell(-1);
						var IBU                 = theRow.insertCell(-1);
						var ABV                 = theRow.insertCell(-1);
						var Ingredients         = theRow.insertCell(-1);
						var LastBrewed          = theRow.insertCell(-1);
						var Inventory           = theRow.insertCell(-1);
						var AddToScheduledBrews = theRow.insertCell(-1);

						
						Version    .innerHTML = theRecipe.version;
						Name       .innerHTML = theRecipe.name;
						Style      .innerHTML = recipeStyle.name;
						IBU        .innerHTML = recipeStyle.ibuMin;
						ABV        .innerHTML = recipeStyle.abvMin;
						Ingredients.innerHTML = PAGE_NOT_FOUND_REFERENCE_START + "ingredients" + PAGE_NOT_FOUND_END;
						var latestDate;
						if (theRecipe.date == null)
						{
							latestDate = "never brewed";
						}
						else
						{
							latestDate = theRecipe.date;
						}
						console.log("latestDate=" + latestDate);
						
						LastBrewed.innerHTML = latestDate;
						Inventory.innerHTML = PAGE_NOT_FOUND_REFERENCE_START + "inventory" + PAGE_NOT_FOUND_END;
					}
				}

				function GenerateBatchesTable()
				{
					console.log("running function GenerateBatchesTable");

				}



			//	//Build an array containing Customer records.
			//	var customers = new Array();
			//	customers.push(["Customer Id", "Name", "Country"]);
			//	customers.push([1, "John Hammond", "United States"]);
			//	customers.push([2, "Mudassar Khan", "India"]);
			//	customers.push([3, "Suzanne Mathews", "France"]);
			//	customers.push([4, "Robert Schidner", "Russia"]);
			//	
			//	//Create a HTML Table element.
			//	var table = document.createElement("TABLE");
			//	table.border = "1";
			//	
			//	//Get the count of columns.
			//	var columnCount = customers[0].length;
			//	
			//	//Add the header row.pe
			//	var row = table.insertRow(-1);
			//	for (var i = 0; i < columnCount; i++) 
			//	{
			//		var headerCell = document.createElement("TH");
			//		headerCell.innerHTML = customers[0][i];
			//		row.appendChild(headerCell);
			//	}
			//	
			//	//Add the data rows.
			//	for (var i = 1; i < customers.length; i++) 
			//	{
			//		row = table.insertRow(-1);
			//		for (var j = 0; j < columnCount; j++) 
			//		{
			//			var cell = row.insertCell(-1);
			//			cell.innerHTML = customers[i][j];
			//		}
			//	}
			//		
			//		var dvTable = document.getElementById("dvTable");
			//		dvTable.innerHTML = "";
			//		dvTable.appendChild(table);
			}
	</script>
